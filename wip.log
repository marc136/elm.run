Another fresh start, see older log files [log2](../mdgriffith_elm-dev/ext-ulm/log.md) and before that [log1]([marc.md](../elm-js-compiler/marc.md) for more info and things I tried.

Now I could try to load an `elm.json` file from wasm (to find out about dependencies), or instead get started on compiling `elm-community/result-extra` into an `artifacts.dat`.

So I'm trying to load an `elm.json` file now from the current directory.

I started inside `builder/src/Elm/Details.hs` with the `load` function, but I don't know if getting the file modification time of `elm.json` will be possible. So I'm trying to skipt that for now.
I will also skip reading `Stuff.details` from `./elm-stuff/0.19.1/elm.d` which contains info about the last run build (like time), so I can skip ahead to the `generate` fn in `Details.hs` because that will always be executed if something needs to be compiled.

The `generate` fn calls `initEnv`, which uses `Solver.initEnv` and contacts the elm package server (so it won't work directly in WASM).  
So I'll try to only extract `Outline.read` (which reads the contents of the elm.json file) from there and then run `verifyApp`.
Maybe I'll need to fake a valid environment that knows about packages (what `builder/src/Deps/Sover` does). But first I will try to ignore that.

From there I only want to use `verifyDependencies` in general, and specificially `build` that creates `artifacts.dat` files.  
As a first test, I try to build the dependency `elm-community/maybe-extra/5.3.0` which has no indirect dependencies and only one file.

---

I removed everything and started again from the top with `Details.load`.  
I cloned `builder/src/Elm/Details.hs` to `Ulm/Details.hs` and then copied everything that was necessary.

I skipped running `build` so far by always providing a pre-built `artifacts.dat` for every dependency from my own ELM_HOME dir.

Now I want to get `build` working. First with the `elm-community/maybe-extra/5.3.0` package.

For `build` I hardly had to do anything. I copied from the elm compiler and removed a few things, but then I was able to compile maybe-extra.

---

After `Details.load` now works, I want to to reuse parts of that code to replace the hardcoded `Ulm.ReadArtifacts` code.  
That code might still be useful for a REPL or another editor that does not allow to install custom packages.

But now I want to prepare building all dependencies to artifacts (and returning them) so I can start using that inside welmo (forked https://elm-lang.org/try editor).

I added a `Ulm.Details.loadArtifactsForApp` function so I don't need to write all `artifacts.dat` files first and then load them again, but rather return the artifacts, after compiling the dependencies.

I then used this function inside `Ulm.compileWasm` to no longer need hardcoded dependencies, but rather load them from "disk".

---

With this shortcut in place to build one source file and its dependencies, I want to follow the proper trail of `elm make` to build the dependencies and then one file with a main (and possible additional local files).

Starting with `runHelp` in elm-compiler-wasm/terminal/src/Make.hs I can first use `Details.load` to ensure that all dependencies are built and loaded, then skip ahead to `buildPaths` and then pick the path to compile a js file (which contains at least one `main` function).
